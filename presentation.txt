

			Projeto em Grupo - Exercício de Programação 2


==========================================================================================================	
	 1 - Integrantes do Grupo
==========================================================================================================	

	  	-	Lucas Kanashiro
  
  	  	-	Macartur de Sousa


==========================================================================================================
	 2 - Requisitos do Projeto
==========================================================================================================

	Gerar Número Randomico:

	--> Gerador Verdadeiramente aleatório
		Usando arquivo /dev/random 

	--> Criar Método para gerar um Número Pseudo Aleatório
	
	Verificar Se um Numero é Primo:
	
	--> usando algoritmo de Miller Rabin
	
	Implementar Função de Exponenciação : 
			
		modProd()
	
	Modular usando Numeros BigInteger:
	
		C = M ^ E mod P
	
	Usando RSA:

	-->  Cifrar

	-->  Decifrar



==========================================================================================================	
	 3 - Determinar número usando Miller Rabin
==========================================================================================================

	--> dado N um numero interiro primo e A um inteiro qualquer, tal que:
	
		1 < A < N
	
	--> encontra-se :
	
	2 ^ S | (n-1)
	
	d = (n-1)/2^S

	Então se N é um número primo  e A tiver um divisor em comum com N então:
	
		A ^ d === 1 mod n
		
	ou existe um r que está entre 0 e S-1 ,tal que :

		A ^ ( 2^r * D) === -1 mod N

	Caso o número A não satisfaça o teorema diz que ele é uma testemunha
	 contra a primalidade de N, dizendo que ele é composto.

=============================================================================================================	
	 4 -     Passos Algoritmo RSA		
=============================================================================================================


 --> Dado dois valores P e Q primos grandes e co-primos 

	
=============================================================================================================
	 Determinar N:
=============================================================================================================


	n = p * q


=============================================================================================================
	Determinar PhiN
=============================================================================================================
 
	PhiN = (p-1) * (q-1)



=============================================================================================================
	Encontrar um numero qualquer E talque 
=============================================================================================================

	1 < E < phiN e E é co-primo de PhiN
	
   	* foi utilizado GCD de Euclides Extendido



=============================================================================================================
	Determinar D que é o inverso multiplicativo de E mod phiN 
=============================================================================================================

	D * E = 1 mod PhiN
	
=============================================================================================================
	Temos as chaves dadas Pelos valores
=============================================================================================================

	Conjunto Chave Publica = E , N;
	Conjunto Chave Privada = D , N;
		
	Cifrando:
	
		C = M^E mod N;
	
	Decifrando:
	
		M = C^D mod N;

=============================================================================================================
	 5 - Executando o programa
=============================================================================================================
	To Generate Keys use :

	java -jar RSA.jar -genKeys [<numberOfBits>] <publicKeyFile>.txt <privateKeyFile>.txt
	
	To Encrypt Text use :

	java -jar RSA.jar  -encrypt <privateKeyFile>.txt <textFile>.txt <cypherText>.txt
	
	To Decrypt Text use :

	java -jar RSA.jar  -decrypt <publicKeyFile>.txt <textFile>.txt <decypherText>.txt
		
		
==============================================================================================================
