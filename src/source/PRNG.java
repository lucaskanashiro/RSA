package src.source;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.math.BigInteger;

public class PRNG {

    private static final BigInteger zero = BigInteger.valueOf(0);
    private static final BigInteger three = BigInteger.valueOf(3);
    private static final BigInteger four = BigInteger.valueOf(4);
    
    private int seed_length;
    /***********************************************************/

    public PRNG(int seed_length) {
        seed_length = this.seed_length;
    }

    /***********************************************************
     * This method returns a string which contains a random sequence of bits
     * from a TRNG (/dev/urandom), whose randomness are generated by the hardware entrophy.
     * The size of the sequence is defined by the variable seed_length.
     ***********************************************************/
    public int getSeed_length() {
        return seed_length;
    }

    public void setSeed_length(int seed_length) {
        this.seed_length = seed_length;
    }

    public static String getSeed(int seed_length) {
        try {
            
            File file = new File("/dev/urandom");
            InputStream is = new FileInputStream(file);

            byte[] bytes = new byte[seed_length];

            is.read(bytes);
            is.close();

            String s = new String();

            for (int i = 0; i < bytes.length; i++) {
                s += ((int) bytes[i] & 0xFF);
            }

            //System.out.println("Seed: " + s);
            //System.out.println("Length: " + s.length());

            return s;

        } catch (Exception e) {
            System.out.println("Error getting the seed!");
            return "ERROR";
        }
    }
    
    /***********************************************************
     * Methods to implement the PRNG ShumShumBlum.
     * This method returns a prime number who is congruent to 3 (mod 4)
     */
    
    public static BigInteger getPrime(int seed_length) {
        BigInteger p;

        while (true) {
            p = new BigInteger(getSeed(seed_length));
            if (p.mod(four).equals(three)) {
                break;
            }
        }

        return p;
    }
    
    /***********************************************************
     *  This method returns the N of the PRNG, where N = p*q 
     */

    public static BigInteger getN(int seed_length, BigInteger p, BigInteger q) {
        while (p.equals(q)) {
            q = getPrime(seed_length);
        }
        return p.multiply(q);
    }
    
    /***********************************************************
     * Getting the random number using the ShumShumBlum PRNG.
     * First, a seed x0 is generated, so p and q are calculated. 
     * Since N must be coprime with x0, p and q are calculated until
     * they're not factors with x0. Then, x1 = (x0)Â² mod N.
     */

    public BigInteger getRandomNumber(int seed_length) {
        BigInteger randomNumber;
        BigInteger seed = new BigInteger(getSeed(seed_length));
        BigInteger p = getPrime(seed_length);
        BigInteger q = getPrime(seed_length);

        while (seed.mod(p).equals(zero) || seed.mod(p).equals(zero)) {
            p = getPrime(seed_length);
            q = getPrime(seed_length);
        }
        
        BigInteger N = getN(seed_length, p, q); 

        randomNumber = (seed.multiply(seed)).mod(N);
        
        //System.out.println("Random Number: " + randomNumber);

        return randomNumber;
    }
}
